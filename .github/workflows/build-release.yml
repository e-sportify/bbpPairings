name: Build and Release

on:
  push:
    branches: [ master ]
    tags:
      - 'v*' # Run workflow on version tags, e.g. v1.0.0
  pull_request:
    branches: [ master ]
  schedule:
    # Run every day at midnight UTC
    - cron: '0 0 * * *'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: bbpPairings-linux
            asset_name: bbpPairings-linux
          - os: windows-latest
            platform: windows
            artifact_name: bbpPairings-windows.exe
            asset_name: bbpPairings-windows
          - os: macos-latest
            platform: macos
            artifact_name: bbpPairings-macos
            asset_name: bbpPairings-macos

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Required for git describe to work properly

    - name: Setup Linux build environment
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ make

    - name: Setup macOS build environment
      if: matrix.platform == 'macos'
      run: |
        brew install gcc make

    - name: Build for Linux
      if: matrix.platform == 'linux'
      run: |
        make COMP=gcc HOST=Linux bits=64
        mv bbpPairings.exe ${{ matrix.artifact_name }}

    - name: Build for Windows
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        make COMP=gcc HOST=Windows bits=64
        Copy-Item bbpPairings.exe -Destination ${{ matrix.artifact_name }}

    - name: Build for macOS
      if: matrix.platform == 'macos'
      run: |
        make COMP=gcc HOST=Mac bits=64
        mv bbpPairings.exe ${{ matrix.artifact_name }}

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.artifact_name }}
        retention-days: 7

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Set up release date
        if: github.event_name == 'schedule'
        id: date
        run: echo "RELEASE_DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create tag for scheduled run
        if: github.event_name == 'schedule'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Configure Git
        if: github.event_name == 'schedule'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Create and push tag for daily build
        if: github.event_name == 'schedule'
        run: |
          TAG_NAME="nightly-${{ steps.date.outputs.RELEASE_DATE }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "RELEASE_TAG=$TAG_NAME" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Display structure of downloaded files
        run: ls -R
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bbpPairings-linux/bbpPairings-linux
            bbpPairings-windows/bbpPairings-windows.exe
            bbpPairings-macos/bbpPairings-macos
          tag_name: ${{ github.event_name == 'schedule' && format('nightly-{0}', steps.date.outputs.RELEASE_DATE) || github.ref_name }}
          name: ${{ github.event_name == 'schedule' && format('Daily build {0}', steps.date.outputs.RELEASE_DATE) || github.ref_name }}
          draft: false
          prerelease: ${{ github.event_name == 'schedule' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
